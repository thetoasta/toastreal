<script>
        console.log("IV: 1.0.1")

        const firebaseConfig = {
            apiKey: "AIzaSyAIi3_sc81JogKi_UjMGYqUMvsf4WBDJPc", // Replace with your actual API key
            authDomain: "toastrealxyz.firebaseapp.com",
            projectId: "toastrealxyz",
            storageBucket: "toastrealxyz.appspot.com",
            messagingSenderId: "774884910313",
            appId: "1:774884910313:web:e11002887adf1055acfc78",
            measurementId: "G-3H38LZB2BX"
        };
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const auth = firebase.auth();
        const db = firebase.firestore();

        let groupId = null;
        let userNicknames = {}; // Store nicknames
        let currentUserEmail = null; // Store the current user's email

        // Check if user is logged in
        auth.onAuthStateChanged(user => {
            if (user) {
                currentUserEmail = user.email; // Get and store the user's email
                document.getElementById('logout-button').style.display = 'block';
                loadGroupConversation();
            } else {
                document.getElementById('logout-button').style.display = 'none';
                window.location.href = 'accounts.html';
            }
        });

        // Load group conversation
        function loadGroupConversation() {
            const urlParams = new URLSearchParams(window.location.search);
            groupId = urlParams.get('group');
            if (!groupId) {
                showNotification('No group specified.', 'error');
                return;
            }

            db.collection('groups').doc(groupId).get().then(doc => {
                if (doc.exists) {
                    const groupData = doc.data();
                    document.getElementById('group-name').innerText = groupData.name || 'Group Conversation';
                    loadMessages();
                } else {
                    showNotification('Group not found.', 'error');
                }
            }).catch(error => {
                showNotification('Error: ' + error.message, 'error');
            });
        }

        // Function to fetch nickname and then load message
        function fetchNicknameAndLoadMessage(messageData, messageId) {
            const senderEmail = messageData.sender;
            if (userNicknames[senderEmail]) {
                // Nickname is already in the cache
                loadMessageWithNickname(messageData, userNicknames[senderEmail], messageId);
            } else {
                // Fetch nickname from Firestore
                db.collection('users').doc(senderEmail).get().then(userDoc => {
                    if (userDoc.exists) {
                        const userData = userDoc.data();
                        const nickname = userData.nickname || senderEmail; // Use email if nickname doesn't exist
                        userNicknames[senderEmail] = nickname; // Store in cache
                        loadMessageWithNickname(messageData, nickname, messageId);
                    } else {
                        // User document not found, use email as fallback
                        userNicknames[senderEmail] = senderEmail;
                        loadMessageWithNickname(messageData, senderEmail, messageId);
                    }
                }).catch(error => {
                    console.error("Error fetching nickname:", error);
                    userNicknames[senderEmail] = senderEmail;
                    loadMessageWithNickname(messageData, senderEmail, messageId); //show email
                });
            }
        }

        function loadMessageWithNickname(messageData, senderName, messageId) {
            const messagesContainer = document.getElementById('messages-container');
            const messageElement = document.createElement('div');
            messageElement.className = 'message';
            messageElement.innerHTML = `
                <div class="message-content">
                    <p><strong class="sender-name">${senderName}</strong>: <span class="message-text">${messageData.text}</span></p>
                    <small class="timestamp">${new Date(messageData.timestamp.toDate()).toLocaleString()}</small>
                </div>
                 <div class="menu">
                    <button class="menu-button" onclick="toggleMenu('${messageId}')">â‹®</button>
                    <div class="menu-content" id="menu-${messageId}">
                        ${currentUserEmail === messageData.sender ? `
                            <button onclick="deleteMessage('${messageId}')">Delete</button>
                        ` : ``}
                    </div>
                </div>
            `;

            messagesContainer.appendChild(messageElement);
        }

        // Load messages
        function loadMessages() {
            db.collection('groups').doc(groupId).collection('messages').orderBy('timestamp', 'asc').onSnapshot(snapshot => {
                const messagesContainer = document.getElementById('messages-container');
                messagesContainer.innerHTML = ''; // Clear previous messages
                snapshot.forEach(doc => {
                    const messageData = doc.data();
                    const messageId = doc.id; // Get the message ID
                    fetchNicknameAndLoadMessage(messageData, messageId); // Pass the ID
                });
            });
        }

        // Send message
        function sendMessage(event) {
            event.preventDefault();
            const user = auth.currentUser;
            if (!user) {
                showNotification('You must be logged in to send messages.', 'error');
                return;
            }
            const messageText = document.getElementById('message-text').value;
            if (!messageText.trim()) { // prevent sending empty messages
                showNotification('Message cannot be empty.', 'error');
                return;
            }

            db.collection('groups').doc(groupId).collection('messages').add({
                sender: user.email,
                text: messageText,
                timestamp: firebase.firestore.FieldValue.serverTimestamp()
            }).then(() => {
                document.getElementById('message-text').value = '';
                showNotification('Message sent!', 'success');
            }).catch(error => {
                showNotification('Error: ' + error.message, 'error');
            });
        }

        // Function to delete a message
        function deleteMessage(messageId) {
            db.collection('groups').doc(groupId).collection('messages').doc(messageId).delete()
                .then(() => {
                    showNotification('Message deleted successfully!', 'success');
                })
                .catch(error => {
                    showNotification('Error deleting message: ' + error.message, 'error');
                });
        }

        // Log out user
        function logout() {
            auth.signOut().then(() => {
                window.location.href = 'accounts.html';
            }).catch((error) => {
                showNotification('Error: ' + error.message, 'error');
            });
        }
        function toggleMenu(messageId) {
            const menu = document.getElementById(`menu-${messageId}`);
            menu.style.display = menu.style.display === 'block' ? 'none' : 'block';
        }
    </script>